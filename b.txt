package com.fd.service.order.impl;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.alibaba.fastjson.JSONObject;
import com.fd.provide.order.GoodsService;
import com.fd.provide.order.OrderService;
import com.fd.provide.order.PartnerService;
import com.fd.provide.order.PaymentService;
import com.fd.provide.order.SuborderService;
import com.fd.provide.order.exception.OrderExceptionCodeEnum;
import com.fd.provide.order.par.CapitalRulesPar;
import com.fd.provide.order.par.GoodsPar;
import com.fd.provide.order.par.OrderPar;
import com.fd.provide.order.pojo.cms.GoodsObj;
import com.fd.provide.order.pojo.cms.OrderObj;
import com.fd.provide.order.pojo.cms.PartnerObj;
import com.fd.provide.order.pojo.cms.PaymentObj;
import com.fd.provide.order.pojo.cms.SuborderObj;
import com.fd.provide.tool.orderenum.GoodsNumEnum;
import com.fd.provide.tool.orderenum.OrderStateEnum;
import com.fd.provide.tool.orderenum.OrderTypeEnum;
import com.fd.provide.tool.orderenum.PartnerNumEnum;
import com.fd.provide.tool.orderenum.PayStateEnum;
import com.fd.provide.tool.orderenum.RulesTypeTypeEnum;
import com.fd.provide.tool.util.DateUtil;
import com.fd.provide.user.UserService;
import com.fd.provide.user.pojo.UserInfoObj;
import com.fd.provide.user.pojo.UserObj;
import com.fd.service.order.convert.Tcms2TcmsObjUtil;
import com.fd.service.order.dao.CapitalRulesDao;
import com.fd.service.order.dao.GoodsDao;
import com.fd.service.order.dao.OrderDao;
import com.fd.service.order.dao.PartnerDao;
import com.fd.service.order.pojo.CapitalRules;
import com.fd.service.order.pojo.Goods;
import com.fd.service.order.pojo.Order;
import com.fd.service.order.pojo.Tpartner;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;

import net.sf.json.JSONArray;

@Service("orderService")
public class OrderServiceImpl implements OrderService{
	private Logger logger = LoggerFactory.getLogger(OrderServiceImpl.class);

	@Autowired
	private OrderDao orderadfsdfsdDao;
	
	@Autowired
	private OrderDao orderaaDao;

	@Autowired
	private PartnerDao partnerDao;
	
	@Autowired
	private GoodsDao goodsDao;
	
	@Autowired
	private CapitalRulesDao capitalRulesDao;
	
	@Autowired
	private PartnerService partnerService;

	@Autowired
	private SuborderService suborderService;

	@Autowired
	private UserService userService;

	@Autowired
	private GoodsService goodsService;
	
	@Autowired
	private PaymentService paymentService;

	@Override
	public int deleteByPrimaryKey(Integer id) {
		return orderDao.deleteByPrimaryKey(id);
	}

	@Override
	public int insertSelective(OrderObj record) {
		Order order = Tcms2TcmsObjUtil.convertToOrder(record, null);
		  int res=orderDao.insertSelective(order);
		  record.setId(order.getId());
		return res;
	}

	@Override
	public OrderObj selectByPrimaryKey(Integer id) {
		Order order=orderDao.selectByPrimaryKey(id);
		OrderObj orderObj = Tcms2TcmsObjUtil.convertToOrderObj(order, null);
		return   orderObj;
	}

	@Override
	public OrderObj selectByOrderNo(String order_no) {
		Order order = orderDao.selectByOrderNo(order_no);
		OrderObj orderObj = Tcms2TcmsObjUtil.convertToOrderObj(order, null);
		return orderObj;
	}
	
	@Override
	public List<OrderObj> selectDetail(Integer userId,String orderNo) {
		Order order = new Order();
		order.setUserId(userId);
		order.setOrderNo(orderNo);
		List<Order> list=orderDao.selectDetail(order);
		List<OrderObj> listObj = Tcms2TcmsObjUtil.convertCollectionToOrderObj(list);
		return listObj;
	}
	
	@Override
	public List<OrderObj> selectCourseDetail(Integer userId,String orderNo) {
		Order order = new Order();
		order.setUserId(userId);
		order.setOrderNo(orderNo);
		List<Order> list=orderDao.selectCourseDetail(order);
		List<OrderObj> listObj = Tcms2TcmsObjUtil.convertCollectionToOrderObj(list);
		return listObj;
	}
	
	@Override
	public List<OrderObj> selectPartnerDetail(Integer userId,String orderNo) {
		Order order = new Order();
		order.setUserId(userId);
		order.setOrderNo(orderNo);
		List<Order> list=orderDao.selectPartnerDetail(order);
		List<OrderObj> listObj = Tcms2TcmsObjUtil.convertCollectionToOrderObj(list);
		return listObj;
	}

	@Override
	public PageInfo<OrderObj> queryList(Integer userId,Integer orderType, Integer orderChannel, Integer orderState,Integer pageNum,Integer pageSize) {
		Order order = new Order();
		order.setUserId(userId);
		if(orderType!=null&&orderType!=0) {
			order.setOrderType(orderType);
		}
		if(orderChannel!=null&&orderChannel!=0) {
			order.setOrderChannel(orderChannel);
		}
		if(orderState!=null&&orderState!=0) {
			order.setOrderState(orderState);
		}
		PageHelper.startPage(pageNum, pageSize);
		List<Order> list=orderDao.queryList(order);
	    PageInfo<Order> pageInfo = new PageInfo<Order>(list);  
		List<OrderObj> listObj = Tcms2TcmsObjUtil.convertCollectionToOrderObj(list);
	    PageInfo<OrderObj> pageInfo1 = new PageInfo<OrderObj>(listObj);  
	    pageInfo1.setTotal(pageInfo.getTotal());
	    pageInfo1.setPages(pageInfo.getPages());
		return pageInfo1;
	}

	@Override
	public int updateByPrimaryKeySelective(OrderObj record) {
		Order order = Tcms2TcmsObjUtil.convertToOrder(record, null);
		return orderDao.updateByPrimaryKeySelective(order);
	}
	
	@Override
	public int updateByOrderNo(String order_no) {
		return orderDao.updateByOrderNo(order_no);
	}

	@Override
	@Transactional
	public String insertOrderAndSubOrder(OrderObj record, String suborderList) throws RuntimeException{
		logger.info("开始创建订单.........订单数据=" + JSONObject.toJSONString(record) + "，子单数据=" + suborderList);
		try {
			List<SuborderObj> list = new ArrayList<SuborderObj>();
			JSONArray jsonArray =JSONArray.fromObject(suborderList);
			list = JSONArray.toList(jsonArray,SuborderObj.class);
			BigDecimal subTotalAmount = BigDecimal.ZERO;  //子订单总金额
			BigDecimal goodsTotalAmount = BigDecimal.ZERO;  //商品实际总金额
			if(list.size()>0) {
				for(SuborderObj suborderObj : list) {
					if(record.getOrderType()==OrderTypeEnum.TYPE_2.getIndex()){
						PartnerObj partnerObj =partnerService.selectByPrimaryKey(suborderObj.getGoodsId());//购买的会员等级
						//购买的是 高级合伙人  需要验证  用户是否购买第三节课
						if(partnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_7.getCode())) {
							boolean isbuy3=false;
							List<GoodsObj> goodsObjList = new ArrayList<>();
							GoodsPar goodsPar = new GoodsPar();
							goodsPar.setUserId(record.getUserId());
							goodsObjList = goodsService.queryGoods(goodsPar);
							if(null!=goodsObjList&&goodsObjList.size()>0) {
								for (int i = 0; i < goodsObjList.size(); i++) {
									GoodsObj O=goodsObjList.get(i);
									if(O!=null){
										if(GoodsNumEnum.NUM_3.getCode().equals(O.getGoodsNo())||GoodsNumEnum.NUMW_3.getCode().equals(O.getGoodsNo())){
											//3. 购买了第三节课就赠送第四节课     -购买且有1-4节课顺序(既  购买了三节课的人就有1-4节课的观看权限) 
											isbuy3=true;
										}
									}
								}
							}
							if(!isbuy3){
								return OrderExceptionCodeEnum.ORDERS000004.getCode();
							}
						}
					}
					
					subTotalAmount = subTotalAmount.add(suborderObj.getNeedPay());
					if(record.getOrderType()==OrderTypeEnum.TYPE_2.getIndex()) {//如果是合伙人
						PartnerObj partnerObj = partnerService.selectByPrimaryKey(suborderObj.getGoodsId());
						if(null == partnerObj) {
							throw new RuntimeException("创建出错，商品ID不正确，合伙人不存在");
						}
						goodsTotalAmount = goodsTotalAmount.add(partnerObj.getUnitPrice());

					}else {
						GoodsObj goodsObj=goodsService.findByGoodId(suborderObj.getGoodsId());
						if(null == goodsObj) {
							throw new RuntimeException("创建出错，商品ID不正确，商品不存在");
						}
						//商品实际总价 = 商品单价 * 数量 + 运费
//						goodsTotalAmount = (goodsTotalAmount.add(goodsObj.getUnitPrice().add(goodsObj.getFreightPrice())));
						goodsTotalAmount = goodsTotalAmount.add((goodsObj.getUnitPrice().multiply(new BigDecimal(suborderObj.getNum()))).add(goodsObj.getFreightPrice()));
					}
				}
				//金额验证
				if(record.getOrderPay().compareTo(goodsTotalAmount)!=0||record.getNeedPay().compareTo(subTotalAmount)!=0) {//订单总金额是否等于商品实际总金额，订单自己支付金额是否等于子订单实际支付金额总和
					throw new RuntimeException("创建出错，传入金额不正确");
				}
				if(record.getNeedPay().compareTo(BigDecimal.ZERO)==1) { //金额大于0才插入订单
					if (insertSelective(record) <= 0) {
						throw new RuntimeException("创建订单出错");
					}
					logger.info("插入订单成功");
					for(SuborderObj suborderObj : list) {
						suborderObj.setOrderId(record.getId());
						suborderObj.setOrderNo(record.getOrderNo());
						suborderObj.setUserId(record.getUserId());
						suborderObj.setCreateTime(DateUtil.getTime1());
						if (suborderService.insertSelective(suborderObj) <= 0) {
							throw new RuntimeException("创建子订单出错");
						}
						logger.info("插入子订单成功");
					}
					return record.getOrderNo();
				}
			}	
		}catch (Exception e) {
			logger.error("创建订单出错" + e.getMessage());
			throw new RuntimeException("创建订单出错" + e.getMessage());
		}
		return "0元订单";
	}

	@Override
	public List<OrderObj> findOrderByPar(OrderPar record) {
		List<Order> orderList =orderDao.findOrderByPar(record); 
		List<OrderObj> orderObjList = Tcms2TcmsObjUtil.convertCollectionToOrderObj(orderList);
		return orderObjList;
	}
	
	@Override
	@Transactional
	public void dealPaymentSucOrderInfo(OrderObj orderObj) throws RuntimeException {
		String orderNo = orderObj.getOrderNo();
		// 购买人
		UserInfoObj userInfoObj = userService.selectByPrimaryKey(orderObj.getUserId());
		if (userInfoObj == null) {
			throw new RuntimeException("购买人不存在");
		}
		// 子单
		List<SuborderObj> suborderObjs = suborderService.selectByOrderId(orderObj.getId());
		if (suborderObjs == null || suborderObjs.isEmpty()) {
			throw new RuntimeException("子单不存在");
		}
		
		int dbResult = 0;
		
		// 更新订单状态
		if (orderObj.getOrderType() == OrderTypeEnum.TYPE_3.getIndex()) { // 如果是书籍变成“已支付”，课程或者会员直接“已完成”
			orderObj.setOrderState(OrderStateEnum.STATE_2.getIndex());
			orderObj.setModifyTime(new Date());
			dbResult = updateByPrimaryKeySelective(orderObj);
		} else {
			orderObj.setOrderState(OrderStateEnum.STATE_7.getIndex());
			orderObj.setModifyTime(new Date());
			dbResult = updateByPrimaryKeySelective(orderObj);
		}
		if (dbResult <= 0) {
			throw new RuntimeException("修改订单状态失败");
		}
		
		// 更新支付状态
		PaymentObj payObj = paymentService.selectByOrderNo(orderNo);
		if (payObj == null) {
			throw new RuntimeException("支付记录不存在");
		}
		payObj.setPayState(PayStateEnum.STATE_2.getIndex());
		payObj.setModifyTime(new Date());
		dbResult = paymentService.updateByPrimaryKeySelective(payObj);
		if (dbResult <= 0) {
			throw new RuntimeException("修改支付状态失败");
		}
		//如果购买的是合伙人，更新用户等级
		Integer userLevel = null;
		// 增加的邀请码数量
		int invitationCode = 0;
		// 取得子订单计算佣金
		UserInfoObj oneuserObj = null;
		UserInfoObj twouserObj = null;
		BigDecimal firstLevelAmout = new BigDecimal("0.00");
		BigDecimal twoLevelAmout = new BigDecimal("0.00");
		// 是否需要修改上下级关系
		boolean needChange = false;
		int recommendUserid = 0;
		
		/**
		 * 如果购买的是合伙人： 修改用户的level并且增加邀请码数量
		 */
		
		if (orderObj.getOrderType() == OrderTypeEnum.TYPE_2.getIndex()) {
			
			// 购买的会员等级
			PartnerObj partnerObj = partnerService.selectByPrimaryKey(suborderObjs.get(0).getGoodsId());
			if (partnerObj == null) {
				throw new RuntimeException("购买的会员等级不存在");
			}
			// 当前的会员等级
			PartnerObj userPartnerObj = partnerService.selectByPrimaryKey(userInfoObj.getUserLevel());
			if (userPartnerObj == null) {
				throw new RuntimeException("当前的会员等级不存在");
			}
			// 设置修改参数
			UserObj paramUserObj = new UserObj();
			paramUserObj.setId(userInfoObj.getId());
			// 当前用户不是合伙人，购买的是合伙人
			if (!userPartnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_4.getCode())
					&& !userPartnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_5.getCode())
					&& !userPartnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_3.getCode())
					&& !userPartnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_7.getCode())) {
				userLevel = partnerObj.getId();
			}
			// 当前用户是高级，购买的是白，黄，钻
			else if (userPartnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_7.getCode())
					&& (partnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_5.getCode())
							|| partnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_4.getCode())
							|| partnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_3.getCode()))) {
				userLevel = partnerObj.getId();
			}
			// 当前用户是白银，购买的是黄，钻
			else if (userPartnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_3.getCode())
					&& (partnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_4.getCode())
							|| partnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_5.getCode()))) {
				userLevel = partnerObj.getId();
			}
			// 当前用户是黄金，购买的是钻石
			else if (userPartnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_4.getCode())
					&& partnerObj.getPartnerNo().equals(PartnerNumEnum.NUM_5.getCode())) {
				userLevel = partnerObj.getId();
			}
			
			// 增加邀请码数量(剩余数量 + 购买的会员得到的邀请码数量)
			invitationCode = partnerObj.getPartnerNum();
			
			// 上级推荐人必须是合伙人，如果不是就查上上级，知道查到是合伙人为止，查不到就归属公司
			oneuserObj = userService.findFatherByUserIdAndUserLevel(userInfoObj.getRecommendUserid(), orderNo, new StringBuilder());
			// 确定是普通用户,初级学员改变上下级关系
			List<Integer> userLevelList = new ArrayList<>();
			userLevelList.add(5);// 初级学员
			userLevelList.add(6);// 普通用户
			if (userLevelList.contains(userInfoObj.getUserLevel())) {
				needChange = true;
				recommendUserid = oneuserObj.getId();
			}
			// 上上级合伙人
			if (oneuserObj != null) {
				// 查询购买人推荐人的推荐人信息 对应二级
				twouserObj = userService.findFatherByUserIdAndUserLevel(oneuserObj.getRecommendUserid(), orderNo, new StringBuilder());
			}

			// 计算出推广佣金
			if (oneuserObj != null) {
				firstLevelAmout = calculateUserCommission(oneuserObj, orderObj, 1, suborderObjs.get(0));
			}
			if (twouserObj != null) {
				twoLevelAmout = calculateUserCommission(twouserObj, orderObj, 2, suborderObjs.get(0));
			}
		}
		
		/**
		 * 5、如果购买的是课程，查询所有子单，循环子单： 如果子单有第二节课，修改用户的level初学者
		 * 如果子单有第三节课，修改用户的level终身： 找到第一个邀请码大于0的合伙人（不是小福,且剩余邀请码数量大于0）：
		 * 向推荐码记录表中添加数据 向资金流水表中添加记录，邀请码佣金记录 更新用户邀请码佣金 更新推荐人用户邀请码数量减1
		 * 如果邀请码数量为0后，记录邀请码为0的时间，如果邀请码使用完，15天之内，不进行补款，购买合伙人，降级为终生学员（不改变原来上下级关系））
		 * 插入邀请码佣金后微信通知 向指定用户发送 推送消息（暂时写死） 胡继友/13590395311 用户id：549618
		 * 连彪/13416161319 用户id：69 悟道助理号//15999628892 用户id：62138
		 */
		List<String> goodsNoList = new ArrayList<String>();
		UserInfoObj userInfo_re = null;
		if (orderObj.getOrderType() == OrderTypeEnum.TYPE_1.getIndex()) {
			GoodsObj goodsObj = new GoodsObj();
			// 找到第一个邀请码大于0的合伙人，或者找到小福
			userInfo_re = userService.findFatherToInvitationCode(userInfoObj.getRecommendUserid(), orderNo, new StringBuilder()); 
			if (userInfo_re == null) {
				throw new RuntimeException("找不到合伙人");
			}
			
			for (SuborderObj suborderObj : suborderObjs) {
				goodsObj = goodsService.findByGoodId(suborderObj.getGoodsId());
				if (goodsObj == null) {
					throw new RuntimeException("订单的商品不存在，goodsId=" + suborderObj.getGoodsId());
				}
				goodsNoList.add(goodsObj.getGoodsNo());
			}
			
			// 上级推荐人必须是合伙人，如果不是就查上上级，知道查到是合伙人为止，查不到就归属公司
			oneuserObj = userService.findFatherByUserIdAndUserLevel(userInfoObj.getRecommendUserid(), orderNo, new StringBuilder());
			// 确定是普通用户,初级学员改变上下级关系
			List<Integer> userLevelList = new ArrayList<>();
			userLevelList.add(5);// 初级学员
			userLevelList.add(6);// 普通用户
			if (userLevelList.contains(userInfoObj.getUserLevel())) {
				needChange = true;
				recommendUserid = oneuserObj.getId();
			}
			
			// 上上级合伙人
			if (oneuserObj != null) {
				// 查询购买人推荐人的推荐人信息 对应二级
				twouserObj = userService.findFatherByUserIdAndUserLevel(oneuserObj.getRecommendUserid(), orderNo, new StringBuilder());
			}
			
			// 计算出推广佣金
			if (oneuserObj != null) {
				firstLevelAmout = calculateUserCommission(oneuserObj, orderObj, 1, suborderObjs.get(0));
			}
			if (twouserObj != null) {
				twoLevelAmout = calculateUserCommission(twouserObj, orderObj, 2, suborderObjs.get(0));
			}
		}
		
		try {
			// 在用户服务处理业务
			logger.info("用户服务开始处理业务...");
			userService.dealPaymentSucOrderInfo(orderObj.getOrderType(), orderNo, orderObj.getNeedPay(),
					goodsNoList, userInfo_re, userInfoObj.getId(), userLevel, invitationCode,
				    needChange, recommendUserid, firstLevelAmout, twoLevelAmout,
					oneuserObj, twouserObj);
			logger.info("用户服务结束处理业务...处理成功");
		} catch (RuntimeException e) {
			throw e;
		}
	}

	/**
	 * 计算佣金
	 * 
	 * @param oneuserObj
	 * @return
	 */
	private BigDecimal calculateUserCommission(UserInfoObj userObj, OrderObj order,int level, SuborderObj subOrder) {
		BigDecimal levelAmout = new BigDecimal("0.00");
		BigDecimal baifenbi = new BigDecimal("100");
		// 查询一级/上级 设置的规则
		CapitalRulesPar par = new CapitalRulesPar();
		par.setGoodsId(subOrder.getGoodsId());
		par.setPartnerId(userObj.getUserLevel());

		Goods goods = null;
		if (OrderTypeEnum.TYPE_1.getIndex() == order.getOrderType()) {
			goods = goodsDao.selectByPrimaryKey(subOrder.getGoodsId());
			if (goods == null) {
				return levelAmout;
			}
		}
		par.setOrderType(order.getOrderType());
		List<CapitalRules> capitalList = capitalRulesDao.findByPar(par);
		if (null != capitalList && capitalList.size() > 0) {
			// 同一个商品 + 会员级别只会存在一条记录
			CapitalRules capitalRules = capitalList.get(0);
			if (RulesTypeTypeEnum.TYPE_1.getIndex() == capitalRules.getRulesType()) {
				if (OrderTypeEnum.TYPE_1.getIndex() == order.getOrderType()) {
					if (goods.getUnitPrice().doubleValue() == order.getOrderPay().doubleValue()) {
						// 查询商品单价 乘以 百分比
						levelAmout = levelAmout.add(order.getNeedPay().multiply(level == 1 ? capitalRules.getFirstLevel():capitalRules.getTwoLevel()));
					}
				}
				if (OrderTypeEnum.TYPE_2.getIndex() == order.getOrderType()) {
					Tpartner partner = partnerDao.selectByPrimaryKey(subOrder.getGoodsId());
					if (partner.getUnitPrice().doubleValue() == order.getOrderPay().doubleValue()) {
						// 查询会员单价 乘以 百分比
						levelAmout = levelAmout.add(order.getNeedPay().multiply(level == 1 ? capitalRules.getFirstLevel():capitalRules.getTwoLevel()));
					}
				}
				levelAmout = levelAmout.divide(baifenbi, 2, BigDecimal.ROUND_HALF_UP);
			} else {
				if (OrderTypeEnum.TYPE_1.getIndex() == order.getOrderType()) {
					if (goods.getUnitPrice().doubleValue() == order.getOrderPay().doubleValue()) {
						// 查询商品单价 乘以 百分比
						levelAmout = levelAmout.add(level == 1 ? capitalRules.getFirstLevel():capitalRules.getTwoLevel());
					}
				}
				if (OrderTypeEnum.TYPE_2.getIndex() == order.getOrderType()) {
					Tpartner partner = partnerDao.selectByPrimaryKey(subOrder.getGoodsId());
					if (partner.getUnitPrice().doubleValue() == order.getOrderPay().doubleValue()) {
						// 查询会员单价 乘以 百分比
						levelAmout = levelAmout.add(level == 1 ? capitalRules.getFirstLevel():capitalRules.getTwoLevel());
					}
				}
			}
		}
		return levelAmout;
	}
	
	@Override
	@Transactional
	public void refundUserMoney(OrderObj orderObj) throws RuntimeException {
		String orderNo = orderObj.getOrderNo();
		// 购买人
		UserInfoObj userInfoObj = userService.selectByPrimaryKey(orderObj.getUserId());
		if (userInfoObj == null) {
			throw new RuntimeException("购买人不存在");
		}
		// 查询payment
		PaymentObj paymentObj = paymentService.selectByOrderNo(orderNo);
		if (paymentObj == null) {
			throw new RuntimeException("支付信息不存在");
		}
		if (paymentObj.getPayState() == PayStateEnum.STATE_5.getIndex()) {
			throw new RuntimeException("已经退过款了");
		}
		logger.info("退款方式: " + paymentObj.getPayType());
		//支付类型1-支付宝支付 2-微信支付 3-余额支付 4-其他（银行等）
		switch (paymentObj.getPayType()) {
		case 1:
			//退款到支付宝
			refundAlipay(orderObj, paymentObj, userInfoObj);
			break;
		case 2:
			//退款到微信
			refundWx(orderObj, paymentObj, userInfoObj);
			break;
		case 3:
			// 退回余额balance2
			refundUserBalance2(orderObj, paymentObj, userInfoObj);
			break;
		case 4:
			//退款到其他（银行等）
			refundOther(orderObj, paymentObj, userInfoObj);
			break;
		default:
			throw new RuntimeException("支付方式不存在");
		}
		// PS:请注意在这里后面的代码都不准涉及到数据库的操作
	}

	/**
	 * 退款到其他（银行等）
	 * @param orderObj
	 * @param paymentObj
	 * @param userInfoObj
	 * @throws RuntimeException
	 */
	private void refundOther(OrderObj orderObj, PaymentObj paymentObj, UserInfoObj userInfoObj) throws RuntimeException{
		logger.info("其他（银行等）退款还没做");
		throw new RuntimeException("其他（银行等）退款还没做");
	}

	/**
	 * 退款到支付宝
	 * @param orderObj
	 * @param paymentObj
	 * @param userInfoObj
	 * @throws RuntimeException
	 */
	private void refundAlipay(OrderObj orderObj, PaymentObj paymentObj, UserInfoObj userInfoObj) throws RuntimeException{
		logger.info("支付宝退款还没做");
		throw new RuntimeException("支付宝退款还没做");
	}

	/**
	 * 退款到微信
	 * @param orderObj
	 * @param paymentObj
	 * @param userInfoObj
	 * @throws RuntimeException
	 */
	private void refundWx(OrderObj orderObj, PaymentObj paymentObj, UserInfoObj userInfoObj) throws RuntimeException{
		logger.info("微信退款还没做");
		throw new RuntimeException("微信退款还没做");
	}

	/**
	 * 退回余额balance2
	 * @param orderObj
	 * @param userInfoObj
	 */
	private void refundUserBalance2(OrderObj orderObj, PaymentObj paymentObj, UserInfoObj userInfoObj) throws RuntimeException{
		int dbResult = 0;
		// 修改订单状态为已退款
		orderObj.setOrderState(OrderStateEnum.STATE_9.getIndex());
		orderObj.setModifyTime(new Date());
		dbResult = updateByPrimaryKeySelective(orderObj);
		if (dbResult <= 0) {
			throw new RuntimeException("修改订单状态为已退款失败，orderNo=" + orderObj.getOrderNo());
		}
		// 修改支付状态为已退款
		paymentObj.setPayState(PayStateEnum.STATE_5.getIndex());
		paymentObj.setModifyTime(new Date());
		dbResult = paymentService.updateByPrimaryKeySelective(paymentObj);
		if (dbResult <= 0) {
			throw new RuntimeException("修改支付状态为已退款失败");
		}
		
		// 如果还有其他操作，就在这里这里写，不要写在退款后面
		
		// 退款到用户balance2
		try {
			userService.refundUserBalance2(userInfoObj.getId(), orderObj.getNeedPay());
			logger.info("退款balance2成功，orderNo=" + orderObj.getOrderNo());
		} catch (RuntimeException e) {
			throw new RuntimeException("退款balance2失败，orderNo=" + orderObj.getOrderNo());
		}
	}
}

